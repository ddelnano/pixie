# Copyright 2018- The Pixie Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

load("@bazel_tools//tools/build_defs/pkg:pkg.bzl", "pkg_tar")
load("@io_bazel_rules_docker//container:container.bzl", "container_image")
load("@io_bazel_rules_docker//java:image.bzl", "DEFAULT_JAVA_BASE")
load("@io_bazel_rules_docker//scala:image.bzl", "scala_image")
load("@io_bazel_rules_scala//scala:scala.bzl", "scala_binary", "scala_library")
load("@io_bazel_rules_scala//thrift:thrift.bzl", "thrift_library")
load("@io_bazel_rules_scala//twitter_scrooge:twitter_scrooge.bzl", "scrooge_scala_library")
load("//bazel/external/ubuntu_packages:packages.bzl", "packages")

package(default_visibility = ["//src/stirling:__subpackages__"])

genrule(
    name = "certs",
    outs = [
        "ca.crt",
        "client.crt",
        "client.key",
        "server.crt",
        "server.key",
    ],
    cmd = """
        $(location //src/common/testing/test_utils/cert_generator:cert_generator) \
        --ca_crt $(location ca.crt) \
        --client_crt $(location client.crt) \
        --client_key $(location client.key) \
        --server_crt $(location server.crt) \
        --server_key $(location server.key) \
        --secret_key_type pkcs8
    """,
    tools = [
        "//src/common/testing/test_utils/cert_generator",
    ],
)

pkg_tar(
    name = "ssl_keys",
    srcs = [
        "ca.crt",
        "client.crt",
        "client.key",
        "server.crt",
        "server.key",
    ],
    mode = "0755",
    package_dir = "/etc/ssl",
    strip_prefix = "/src/stirling/source_connectors/socket_tracer/testing/containers/thriftmux",
)

# TODO(ddelnano): byteman is required until dealing with
# netty's libnetty_tcnative.so's random file name is solved for.
# See #407 for more details.
pkg_tar(
    name = "byteman_rule",
    srcs = [
        "byteman_rule.txt",
    ],
    mode = "0755",
    package_dir = "/etc/byteman",
    strip_prefix = "/src/stirling/source_connectors/socket_tracer/testing/containers/thriftmux",
)

thrift_library(
    name = "thrift_library",
    srcs = glob(["**/*.thrift"]),
)

java_import(
    name = "netty_handler",
    # Add all the jars built from twitter internally built service since
    # finagle is not released yet so we cannot build from maven upstream.
    # A real finagle service was built and then its classpath jars were
    # copied to the libs/ directory
    jars = glob(["libs/*.jar"]),
)

scala_library(
    name = "scrooge_jars",
    visibility = ["//visibility:public"],
    exports = [
        # finagle will be included in the libs/ jar since it hasn't been
        # released with the new netty yet. See the :netty_handler target.
        "@maven//:com_twitter_scrooge_core_2_12",
        "@maven//:com_twitter_scrooge_generator_2_12",
        ":netty_handler",
    ],
)

scala_library(
    name = "thrift_jars",
    visibility = ["//visibility:public"],
    exports = [
        "@maven//:org_apache_thrift_libthrift",
    ],
)

scrooge_scala_library(
    name = "thriftmux_scrooge",
    deps = [
        ":thrift_library",
    ],
)

scala_library(
    name = "logging",
    deps = [
        "@maven//:ch_qos_logback_logback_classic",
        "@maven//:ch_qos_logback_logback_core",
        "@maven//:org_slf4j_slf4j_api",
    ],
)

scala_binary(
    name = "server_bin",
    srcs = glob(["**/*.scala"]),
    main_class = "Server",
    deps = [
        ":thriftmux_scrooge",
    ],
)

scala_binary(
    name = "client_bin",
    srcs = glob(["**/*.scala"]),
    main_class = "Client",
    deps = [
        ":thriftmux_scrooge",
    ],
)

container_image(
    name = "thriftmux_base",
    base = DEFAULT_JAVA_BASE,
    debs = [
        packages["libbyteman-java"],
        packages["libcrypt1"],
    ],
    tars = [
        ":ssl_keys",
        ":byteman_rule",
    ],
)

scala_image(
    name = "server_image",
    srcs = glob(["**/*.scala"]),
    base = ":thriftmux_base",
    jvm_flags = [
        "-javaagent:/usr/share/java/byteman-4.0.18.jar=script:/etc/byteman/byteman_rule.txt,boot:/usr/share/java/byteman-4.0.18.jar",
        "-Dorg.jboss.byteman.transform.all",
        "-Dio.netty.native.deleteLibAfterLoading=false",
    ],
    main_class = "Server",
    deps = [
        ":logging",
        ":thriftmux_scrooge",
    ],
)
