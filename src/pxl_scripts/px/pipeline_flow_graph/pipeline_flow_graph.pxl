import px

kelvin_dest = "unknown"
bpf_source_op_start = 10000
memory_source_op = 1000 # This corresponds to a file source
file_source_op = 2
# TODO(ddelnano): This currently can't tell the difference
# between an internal and external grpc sink.
grpc_sink_op = 9100
otel_export_op = 9200

def final_dest_to_str(dest):
    return px.select(dest == otel_export_op, "Otel Export", kelvin_dest)

def get_memory_source_sink_results(df, min_asid):
    file_sources = px.GetFileSourceStatus()
    file_sources.stream_id = file_sources.file_source_id

    tracepoint_sources = px.GetTracepointStatus()
    tracepoint_sources.stream_id = tracepoint_sources.tracepoint_id_str
    
    df = df[df.destination > bpf_source_op_start or df.destination == memory_source_op]
    file_sources_df = df.merge(file_sources, how='left', left_on='stream_id', right_on='file_source_id')
    file_sources_df = file_sources_df['time_', 'upid', 'pod', 'name', 'bytes_transferred', 'destination', 'stream_id_x', 'stream_id_y', 'match']
    tracepoint_sources_df = df.merge(tracepoint_sources, how='left', left_on='stream_id', right_on='tracepoint_id_str')
    tracepoint_sources_df = tracepoint_sources_df['time_', 'upid', 'pod', 'name', 'bytes_transferred', 'destination', 'stream_id_x', 'stream_id_y', 'match']

    df = file_sources_df.append(tracepoint_sources_df)

    # stream_id_y is the column from the file_sources UDTF after the merge
    df.is_bpf_source = df.stream_id_y == ""
    df = df.merge(min_asid, how='left', left_on='match', right_on='match')

    df.to_entity = df.pod
    df.from_entity = px.select(df.is_bpf_source, px.pipeline_dest_to_name(df.destination), df.name) + " " + px.itoa(px.upid_to_asid(df.upid) - df.min_asid)
    df = df['time_', 'from_entity', 'to_entity', 'bytes_transferred']
    df = df.groupby(['from_entity', 'to_entity']).agg(
        total_bytes=('bytes_transferred', px.sum),
    )

    return df

def pipeline_flow_graph(start_time: str):
    agents = px.GetAgentStatus()
    kelvin = agents[px.contains(agents.hostname, "kelvin")]
    min_asid = agents.agg(min_asid=('asid', px.min))
    min_asid.match = True
    
    df = px.DataFrame('sink_results', start_time=start_time)
    df.pod = df.ctx['pod']
    df.match = True

    mem_source_sink_results = get_memory_source_sink_results(df, min_asid)

    df = df[df.destination == otel_export_op or df.destination == grpc_sink_op]
    df.final_dest = final_dest_to_str(df.destination)

    # Use a dummy column that matches in both data frames
    # so the Kelvin hostname join works as expected
    kelvin.match = True

    # For external GRPC sinks, df.pod will be empty and kelvin_dest will be "unknown"
    df.is_dest_kelvin = px.select(df.final_dest == kelvin_dest and df.pod != "", True, False)
    df.final_dest = px.select(not df.is_dest_kelvin and df.final_dest == kelvin_dest, "px.display", df.final_dest)
    df = df.merge(kelvin, how='left', left_on='match', right_on='match')
    # Remove the port from the ip_address column from the GetAgentStatus UDTF
    df.ip_address = px.pluck_array(px.split(df.ip_address, ":"), 0)
    df.kelvin_pod = px.pod_id_to_pod_name(px.ip_to_pod_id(df.ip_address))

    df.from_entity = px.select(df.is_dest_kelvin, df.pod, df.kelvin_pod)
    df.to_entity = px.select(df.is_dest_kelvin, df.kelvin_pod, df.final_dest)

    df = df.groupby(['from_entity', 'to_entity']).agg(
        total_bytes=('bytes_transferred', px.sum),
    )

    df = df.append(mem_source_sink_results)
    df = df[px.substring(df.from_entity, 0, 7) != "unknown"]
    df.total_time = px.abs(px.parse_duration(start_time)) / px.pow(10, 9)
    df.bytes_throughput = df.total_bytes / df.total_time
    return df

