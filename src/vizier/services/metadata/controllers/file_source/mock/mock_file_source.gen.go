// Code generated by MockGen. DO NOT EDIT.
// Source: file_source.go

// Package mock_file_source is a generated GoMock package.
package mock_file_source

import (
	reflect "reflect"
	time "time"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	storepb "px.dev/pixie/src/vizier/services/metadata/storepb"
)

// MockagentMessenger is a mock of agentMessenger interface.
type MockagentMessenger struct {
	ctrl     *gomock.Controller
	recorder *MockagentMessengerMockRecorder
}

// MockagentMessengerMockRecorder is the mock recorder for MockagentMessenger.
type MockagentMessengerMockRecorder struct {
	mock *MockagentMessenger
}

// NewMockagentMessenger creates a new mock instance.
func NewMockagentMessenger(ctrl *gomock.Controller) *MockagentMessenger {
	mock := &MockagentMessenger{ctrl: ctrl}
	mock.recorder = &MockagentMessengerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockagentMessenger) EXPECT() *MockagentMessengerMockRecorder {
	return m.recorder
}

// MessageActiveAgents mocks base method.
func (m *MockagentMessenger) MessageActiveAgents(msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageActiveAgents", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageActiveAgents indicates an expected call of MessageActiveAgents.
func (mr *MockagentMessengerMockRecorder) MessageActiveAgents(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageActiveAgents", reflect.TypeOf((*MockagentMessenger)(nil).MessageActiveAgents), msg)
}

// MessageAgents mocks base method.
func (m *MockagentMessenger) MessageAgents(agentIDs []uuid.UUID, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageAgents", agentIDs, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageAgents indicates an expected call of MessageAgents.
func (mr *MockagentMessengerMockRecorder) MessageAgents(agentIDs, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageAgents", reflect.TypeOf((*MockagentMessenger)(nil).MessageAgents), agentIDs, msg)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DeleteFileSource mocks base method.
func (m *MockStore) DeleteFileSource(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileSource", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileSource indicates an expected call of DeleteFileSource.
func (mr *MockStoreMockRecorder) DeleteFileSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSource", reflect.TypeOf((*MockStore)(nil).DeleteFileSource), arg0)
}

// DeleteFileSourceTTLs mocks base method.
func (m *MockStore) DeleteFileSourceTTLs(arg0 []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileSourceTTLs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileSourceTTLs indicates an expected call of DeleteFileSourceTTLs.
func (mr *MockStoreMockRecorder) DeleteFileSourceTTLs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSourceTTLs", reflect.TypeOf((*MockStore)(nil).DeleteFileSourceTTLs), arg0)
}

// DeleteFileSourcesForAgent mocks base method.
func (m *MockStore) DeleteFileSourcesForAgent(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileSourcesForAgent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileSourcesForAgent indicates an expected call of DeleteFileSourcesForAgent.
func (mr *MockStoreMockRecorder) DeleteFileSourcesForAgent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSourcesForAgent", reflect.TypeOf((*MockStore)(nil).DeleteFileSourcesForAgent), arg0)
}

// GetFileSource mocks base method.
func (m *MockStore) GetFileSource(arg0 uuid.UUID) (*storepb.FileSourceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSource", arg0)
	ret0, _ := ret[0].(*storepb.FileSourceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSource indicates an expected call of GetFileSource.
func (mr *MockStoreMockRecorder) GetFileSource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSource", reflect.TypeOf((*MockStore)(nil).GetFileSource), arg0)
}

// GetFileSourceStates mocks base method.
func (m *MockStore) GetFileSourceStates(arg0 uuid.UUID) ([]*storepb.AgentFileSourceStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSourceStates", arg0)
	ret0, _ := ret[0].([]*storepb.AgentFileSourceStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSourceStates indicates an expected call of GetFileSourceStates.
func (mr *MockStoreMockRecorder) GetFileSourceStates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSourceStates", reflect.TypeOf((*MockStore)(nil).GetFileSourceStates), arg0)
}

// GetFileSourceTTLs mocks base method.
func (m *MockStore) GetFileSourceTTLs() ([]uuid.UUID, []time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSourceTTLs")
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].([]time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFileSourceTTLs indicates an expected call of GetFileSourceTTLs.
func (mr *MockStoreMockRecorder) GetFileSourceTTLs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSourceTTLs", reflect.TypeOf((*MockStore)(nil).GetFileSourceTTLs))
}

// GetFileSources mocks base method.
func (m *MockStore) GetFileSources() ([]*storepb.FileSourceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSources")
	ret0, _ := ret[0].([]*storepb.FileSourceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSources indicates an expected call of GetFileSources.
func (mr *MockStoreMockRecorder) GetFileSources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSources", reflect.TypeOf((*MockStore)(nil).GetFileSources))
}

// GetFileSourcesForIDs mocks base method.
func (m *MockStore) GetFileSourcesForIDs(arg0 []uuid.UUID) ([]*storepb.FileSourceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSourcesForIDs", arg0)
	ret0, _ := ret[0].([]*storepb.FileSourceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSourcesForIDs indicates an expected call of GetFileSourcesForIDs.
func (mr *MockStoreMockRecorder) GetFileSourcesForIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSourcesForIDs", reflect.TypeOf((*MockStore)(nil).GetFileSourcesForIDs), arg0)
}

// GetFileSourcesWithNames mocks base method.
func (m *MockStore) GetFileSourcesWithNames(arg0 []string) ([]*uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSourcesWithNames", arg0)
	ret0, _ := ret[0].([]*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSourcesWithNames indicates an expected call of GetFileSourcesWithNames.
func (mr *MockStoreMockRecorder) GetFileSourcesWithNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSourcesWithNames", reflect.TypeOf((*MockStore)(nil).GetFileSourcesWithNames), arg0)
}

// SetFileSourceTTL mocks base method.
func (m *MockStore) SetFileSourceTTL(arg0 uuid.UUID, arg1 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFileSourceTTL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFileSourceTTL indicates an expected call of SetFileSourceTTL.
func (mr *MockStoreMockRecorder) SetFileSourceTTL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFileSourceTTL", reflect.TypeOf((*MockStore)(nil).SetFileSourceTTL), arg0, arg1)
}

// SetFileSourceWithName mocks base method.
func (m *MockStore) SetFileSourceWithName(arg0 string, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFileSourceWithName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFileSourceWithName indicates an expected call of SetFileSourceWithName.
func (mr *MockStoreMockRecorder) SetFileSourceWithName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFileSourceWithName", reflect.TypeOf((*MockStore)(nil).SetFileSourceWithName), arg0, arg1)
}

// UpdateFileSourceState mocks base method.
func (m *MockStore) UpdateFileSourceState(arg0 *storepb.AgentFileSourceStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileSourceState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFileSourceState indicates an expected call of UpdateFileSourceState.
func (mr *MockStoreMockRecorder) UpdateFileSourceState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileSourceState", reflect.TypeOf((*MockStore)(nil).UpdateFileSourceState), arg0)
}

// UpsertFileSource mocks base method.
func (m *MockStore) UpsertFileSource(arg0 uuid.UUID, arg1 *storepb.FileSourceInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertFileSource", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertFileSource indicates an expected call of UpsertFileSource.
func (mr *MockStoreMockRecorder) UpsertFileSource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertFileSource", reflect.TypeOf((*MockStore)(nil).UpsertFileSource), arg0, arg1)
}
