// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/carnot/planner/file_source/ir/logical.proto

package ir

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FileSourceDeployment struct {
	Name        string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	GlobPattern string          `protobuf:"bytes,2,opt,name=glob_pattern,json=globPattern,proto3" json:"glob_pattern,omitempty"`
	TableName   string          `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	TTL         *types.Duration `protobuf:"bytes,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (m *FileSourceDeployment) Reset()      { *m = FileSourceDeployment{} }
func (*FileSourceDeployment) ProtoMessage() {}
func (*FileSourceDeployment) Descriptor() ([]byte, []int) {
	return fileDescriptor_452b4826b1190f86, []int{0}
}
func (m *FileSourceDeployment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileSourceDeployment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileSourceDeployment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileSourceDeployment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileSourceDeployment.Merge(m, src)
}
func (m *FileSourceDeployment) XXX_Size() int {
	return m.Size()
}
func (m *FileSourceDeployment) XXX_DiscardUnknown() {
	xxx_messageInfo_FileSourceDeployment.DiscardUnknown(m)
}

var xxx_messageInfo_FileSourceDeployment proto.InternalMessageInfo

func (m *FileSourceDeployment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileSourceDeployment) GetGlobPattern() string {
	if m != nil {
		return m.GlobPattern
	}
	return ""
}

func (m *FileSourceDeployment) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *FileSourceDeployment) GetTTL() *types.Duration {
	if m != nil {
		return m.TTL
	}
	return nil
}

func init() {
	proto.RegisterType((*FileSourceDeployment)(nil), "px.carnot.planner.file_source.ir.FileSourceDeployment")
}

func init() {
	proto.RegisterFile("src/carnot/planner/file_source/ir/logical.proto", fileDescriptor_452b4826b1190f86)
}

var fileDescriptor_452b4826b1190f86 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8e, 0xb1, 0x4e, 0x42, 0x31,
	0x14, 0x86, 0x6f, 0x81, 0x68, 0x28, 0x4e, 0x37, 0x0e, 0x48, 0xe2, 0x11, 0x9d, 0x58, 0x6c, 0x13,
	0x75, 0x70, 0x26, 0xc4, 0xc9, 0x18, 0x83, 0x4c, 0x2e, 0xa4, 0xf7, 0x5a, 0x6a, 0x93, 0xd2, 0x73,
	0x53, 0x7a, 0x13, 0xdd, 0x7c, 0x04, 0x9f, 0xc1, 0xc9, 0x47, 0x71, 0x64, 0x64, 0x32, 0x52, 0x16,
	0x47, 0x1e, 0xc1, 0xd0, 0x8b, 0xd1, 0xed, 0x9c, 0xff, 0x7c, 0xff, 0x7f, 0x7e, 0xca, 0x67, 0x2e,
	0xe7, 0xb9, 0x70, 0x16, 0x3d, 0x2f, 0x8c, 0xb0, 0x56, 0x3a, 0x3e, 0xd1, 0x46, 0x8e, 0x67, 0x58,
	0xba, 0x5c, 0x72, 0xed, 0xb8, 0x41, 0xa5, 0x73, 0x61, 0x58, 0xe1, 0xd0, 0x63, 0xda, 0x2d, 0x9e,
	0x58, 0xc5, 0xb3, 0x2d, 0xcf, 0xfe, 0xf1, 0x4c, 0xbb, 0xce, 0xa9, 0xd2, 0xfe, 0xb1, 0xcc, 0x58,
	0x8e, 0x53, 0xae, 0x50, 0x21, 0x8f, 0xc6, 0xac, 0x9c, 0xc4, 0x2d, 0x2e, 0x71, 0xaa, 0x02, 0x3b,
	0xa0, 0x10, 0x95, 0x91, 0x7f, 0xd4, 0x43, 0xe9, 0x84, 0xd7, 0x68, 0xab, 0xfb, 0xc9, 0x1b, 0xa1,
	0xfb, 0x57, 0xda, 0xc8, 0xbb, 0xf8, 0x60, 0x20, 0x0b, 0x83, 0xcf, 0x53, 0x69, 0x7d, 0x9a, 0xd2,
	0x86, 0x15, 0x53, 0xd9, 0x26, 0x5d, 0xd2, 0x6b, 0x0e, 0xe3, 0x9c, 0x1e, 0xd3, 0x3d, 0x65, 0x30,
	0x1b, 0x17, 0xc2, 0x7b, 0xe9, 0x6c, 0xbb, 0x16, 0x6f, 0xad, 0x8d, 0x76, 0x5b, 0x49, 0xe9, 0x21,
	0xa5, 0x5e, 0x64, 0x46, 0x8e, 0xa3, 0xb9, 0x1e, 0x81, 0x66, 0x54, 0x6e, 0x36, 0x09, 0x17, 0xb4,
	0xee, 0xbd, 0x69, 0x37, 0xba, 0xa4, 0xd7, 0x3a, 0x3b, 0x60, 0x55, 0x39, 0xf6, 0x5b, 0x8e, 0x0d,
	0xb6, 0xe5, 0xfa, 0xbb, 0xe1, 0xf3, 0xa8, 0x3e, 0x1a, 0x5d, 0x0f, 0x37, 0x78, 0xff, 0x72, 0xbe,
	0x84, 0x64, 0xb1, 0x84, 0x64, 0xbd, 0x04, 0xf2, 0x12, 0x80, 0xbc, 0x07, 0x20, 0x1f, 0x01, 0xc8,
	0x3c, 0x00, 0xf9, 0x0a, 0x40, 0xbe, 0x03, 0x24, 0xeb, 0x00, 0xe4, 0x75, 0x05, 0xc9, 0x7c, 0x05,
	0xc9, 0x62, 0x05, 0xc9, 0x7d, 0x4d, 0xbb, 0x6c, 0x27, 0x46, 0x9f, 0xff, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xd0, 0x5b, 0x5f, 0x68, 0x89, 0x01, 0x00, 0x00,
}

func (this *FileSourceDeployment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileSourceDeployment)
	if !ok {
		that2, ok := that.(FileSourceDeployment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.GlobPattern != that1.GlobPattern {
		return false
	}
	if this.TableName != that1.TableName {
		return false
	}
	if !this.TTL.Equal(that1.TTL) {
		return false
	}
	return true
}
func (this *FileSourceDeployment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ir.FileSourceDeployment{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "GlobPattern: "+fmt.Sprintf("%#v", this.GlobPattern)+",\n")
	s = append(s, "TableName: "+fmt.Sprintf("%#v", this.TableName)+",\n")
	if this.TTL != nil {
		s = append(s, "TTL: "+fmt.Sprintf("%#v", this.TTL)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLogical(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FileSourceDeployment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileSourceDeployment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileSourceDeployment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TTL != nil {
		{
			size, err := m.TTL.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLogical(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintLogical(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GlobPattern) > 0 {
		i -= len(m.GlobPattern)
		copy(dAtA[i:], m.GlobPattern)
		i = encodeVarintLogical(dAtA, i, uint64(len(m.GlobPattern)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLogical(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLogical(dAtA []byte, offset int, v uint64) int {
	offset -= sovLogical(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FileSourceDeployment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLogical(uint64(l))
	}
	l = len(m.GlobPattern)
	if l > 0 {
		n += 1 + l + sovLogical(uint64(l))
	}
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovLogical(uint64(l))
	}
	if m.TTL != nil {
		l = m.TTL.Size()
		n += 1 + l + sovLogical(uint64(l))
	}
	return n
}

func sovLogical(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLogical(x uint64) (n int) {
	return sovLogical(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FileSourceDeployment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FileSourceDeployment{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`GlobPattern:` + fmt.Sprintf("%v", this.GlobPattern) + `,`,
		`TableName:` + fmt.Sprintf("%v", this.TableName) + `,`,
		`TTL:` + strings.Replace(fmt.Sprintf("%v", this.TTL), "Duration", "types.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLogical(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FileSourceDeployment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogical
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileSourceDeployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileSourceDeployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogical
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogical
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobPattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogical
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogical
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobPattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogical
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLogical
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogical
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogical
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLogical
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TTL == nil {
				m.TTL = &types.Duration{}
			}
			if err := m.TTL.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogical(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLogical
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogical(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogical
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogical
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogical
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogical
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLogical
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLogical
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLogical        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogical          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLogical = fmt.Errorf("proto: unexpected end of group")
)
